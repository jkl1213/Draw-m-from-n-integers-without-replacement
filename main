## Probability distribution of max gap for m numbers drawn from n numbers without replacement

import scipy
n = 100
m = 5
results = []
for k in range(m-1,n):
    prob = scipy.special.binom(k-1,m-2)*(n-k)/scipy.special.binom(n,m)
    results.append(prob)
    
import matplotlib.pyplot as plt
x = np.arange(m-1,n)
y = np.array(results)
plt.bar(x, y, color='grey');
plt.title("Probability distribution of maximum gap");
plt.xlim(m-1,n);

#check that the probability sum is 1
np.sum(results)

#mean
np.dot(results,x)

#median
p = 0
for i in range(len(results)+1):
    p += results[i]
    if p >= 0.5:
        print("Median: {}".format(i))
        break
### Run simulation to see if the empirical probability distribution is close to calculation


import random
n = n
m = m
res = []
rep = 5000
num = set(np.arange(1,n+1))
for i in range(rep):
    rand = random.sample(num, m)
    max_num = max(rand)
    min_num = min(rand)
    gap = max_num - min_num
    res.append(gap)
    
#sort the results 
from collections import Counter
import collections
recounted = Counter(res)
dict(recounted)
od = collections.OrderedDict(sorted(dict(recounted).items()))

#get the results from dict
empirical_prob = []
gap = []
for k, v in od.items(): 
    empirical_prob.append(v/rep)
    gap.append(k)
import matplotlib.pyplot as plt
x = np.array(gap)
y = np.array(empirical_prob)
plt.bar(x, y, color='grey');
plt.title("Probability distribution of maximum gap");
plt.xlim(m-1,n);

